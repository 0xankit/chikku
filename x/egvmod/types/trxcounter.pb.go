// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chikku/egvmod/trxcounter.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OperatorTrxCounter defines the operator transaction counter.
type OperatorTrxCounter struct {
	// Operator is the operator address.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// TrxCount is the transaction count.
	TrxCount int64 `protobuf:"varint,2,opt,name=trx_count,json=trxCount,proto3" json:"trx_count,omitempty"`
}

func (m *OperatorTrxCounter) Reset()         { *m = OperatorTrxCounter{} }
func (m *OperatorTrxCounter) String() string { return proto.CompactTextString(m) }
func (*OperatorTrxCounter) ProtoMessage()    {}
func (*OperatorTrxCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_11a648cd44c3281f, []int{0}
}
func (m *OperatorTrxCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorTrxCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorTrxCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorTrxCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorTrxCounter.Merge(m, src)
}
func (m *OperatorTrxCounter) XXX_Size() int {
	return m.Size()
}
func (m *OperatorTrxCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorTrxCounter.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorTrxCounter proto.InternalMessageInfo

func (m *OperatorTrxCounter) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *OperatorTrxCounter) GetTrxCount() int64 {
	if m != nil {
		return m.TrxCount
	}
	return 0
}

// OperatosTrxsCount defines the operators transaction count.
type OperatorsTrxsCount struct {
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// OperatorTrxCount is the operator transaction count.
	OperatorTrxCounters []*OperatorTrxCounter `protobuf:"bytes,2,rep,name=operator_trx_counters,json=operatorTrxCounters,proto3" json:"operator_trx_counters,omitempty"`
	// TrxCount is the transaction count.
	TrxCount int64 `protobuf:"varint,3,opt,name=trx_count,json=trxCount,proto3" json:"trx_count,omitempty"`
}

func (m *OperatorsTrxsCount) Reset()         { *m = OperatorsTrxsCount{} }
func (m *OperatorsTrxsCount) String() string { return proto.CompactTextString(m) }
func (*OperatorsTrxsCount) ProtoMessage()    {}
func (*OperatorsTrxsCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_11a648cd44c3281f, []int{1}
}
func (m *OperatorsTrxsCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorsTrxsCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorsTrxsCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorsTrxsCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorsTrxsCount.Merge(m, src)
}
func (m *OperatorsTrxsCount) XXX_Size() int {
	return m.Size()
}
func (m *OperatorsTrxsCount) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorsTrxsCount.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorsTrxsCount proto.InternalMessageInfo

func (m *OperatorsTrxsCount) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *OperatorsTrxsCount) GetOperatorTrxCounters() []*OperatorTrxCounter {
	if m != nil {
		return m.OperatorTrxCounters
	}
	return nil
}

func (m *OperatorsTrxsCount) GetTrxCount() int64 {
	if m != nil {
		return m.TrxCount
	}
	return 0
}

func init() {
	proto.RegisterType((*OperatorTrxCounter)(nil), "chikku.egvmod.OperatorTrxCounter")
	proto.RegisterType((*OperatorsTrxsCount)(nil), "chikku.egvmod.OperatorsTrxsCount")
}

func init() { proto.RegisterFile("chikku/egvmod/trxcounter.proto", fileDescriptor_11a648cd44c3281f) }

var fileDescriptor_11a648cd44c3281f = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xce, 0xc8, 0xcc,
	0xce, 0x2e, 0xd5, 0x4f, 0x4d, 0x2f, 0xcb, 0xcd, 0x4f, 0xd1, 0x2f, 0x29, 0xaa, 0x48, 0xce, 0x2f,
	0xcd, 0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x85, 0xc8, 0xeb, 0x41,
	0xe4, 0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x32, 0xfa, 0x20, 0x16, 0x44, 0x91, 0x52, 0x26,
	0x97, 0x90, 0x7f, 0x41, 0x6a, 0x51, 0x62, 0x49, 0x7e, 0x51, 0x48, 0x51, 0x85, 0x33, 0xc4, 0x00,
	0x21, 0x0d, 0x2e, 0x8e, 0x7c, 0xa8, 0xa8, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xa7, 0x13, 0xcf, 0xa3,
	0x7b, 0xf2, 0x1c, 0x30, 0x95, 0x41, 0x70, 0x59, 0x21, 0x4d, 0x2e, 0xce, 0x92, 0xa2, 0x8a, 0x78,
	0xb0, 0xcd, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x10, 0xa5, 0x30, 0xc3, 0x82, 0x38, 0x4a, 0xa0,
	0x2c, 0xa5, 0xc7, 0x8c, 0x08, 0xbb, 0x8a, 0x43, 0x8a, 0x2a, 0x8a, 0xc1, 0xc2, 0x42, 0x46, 0x5c,
	0x3c, 0x49, 0x39, 0xf9, 0xc9, 0xd9, 0xf1, 0x19, 0xa9, 0x99, 0xe9, 0x19, 0x25, 0x60, 0xfb, 0x98,
	0x9d, 0xf8, 0x1f, 0xdd, 0x93, 0xe7, 0x76, 0x02, 0x89, 0x7b, 0x80, 0x85, 0x83, 0xb8, 0x93, 0x10,
	0x1c, 0xa1, 0x3c, 0x2e, 0x51, 0x98, 0x0b, 0xe2, 0xe1, 0xd6, 0xa7, 0x16, 0x15, 0x4b, 0x30, 0x29,
	0x30, 0x6b, 0x70, 0x1b, 0x29, 0xea, 0xa1, 0x78, 0x5d, 0x0f, 0xd3, 0x87, 0x4e, 0xe2, 0x8f, 0xee,
	0xc9, 0x0b, 0x63, 0x8a, 0x17, 0x07, 0x09, 0xe7, 0x63, 0x0a, 0xa2, 0xfa, 0x92, 0x19, 0x9f, 0x2f,
	0x9d, 0xf4, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09,
	0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x14, 0x1a, 0x5f,
	0x15, 0xf0, 0x18, 0xab, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x47, 0x84, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x6e, 0x28, 0x9c, 0x94, 0xcf, 0x01, 0x00, 0x00,
}

func (m *OperatorTrxCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorTrxCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorTrxCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TrxCount != 0 {
		i = encodeVarintTrxcounter(dAtA, i, uint64(m.TrxCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTrxcounter(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorsTrxsCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorsTrxsCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorsTrxsCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TrxCount != 0 {
		i = encodeVarintTrxcounter(dAtA, i, uint64(m.TrxCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OperatorTrxCounters) > 0 {
		for iNdEx := len(m.OperatorTrxCounters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorTrxCounters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrxcounter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTrxcounter(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrxcounter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrxcounter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OperatorTrxCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTrxcounter(uint64(l))
	}
	if m.TrxCount != 0 {
		n += 1 + sovTrxcounter(uint64(m.TrxCount))
	}
	return n
}

func (m *OperatorsTrxsCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovTrxcounter(uint64(m.BlockHeight))
	}
	if len(m.OperatorTrxCounters) > 0 {
		for _, e := range m.OperatorTrxCounters {
			l = e.Size()
			n += 1 + l + sovTrxcounter(uint64(l))
		}
	}
	if m.TrxCount != 0 {
		n += 1 + sovTrxcounter(uint64(m.TrxCount))
	}
	return n
}

func sovTrxcounter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrxcounter(x uint64) (n int) {
	return sovTrxcounter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorTrxCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrxcounter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorTrxCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorTrxCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrxcounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrxcounter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrxcounter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrxCount", wireType)
			}
			m.TrxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrxcounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrxcounter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrxcounter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorsTrxsCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrxcounter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorsTrxsCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorsTrxsCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrxcounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorTrxCounters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrxcounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrxcounter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrxcounter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorTrxCounters = append(m.OperatorTrxCounters, &OperatorTrxCounter{})
			if err := m.OperatorTrxCounters[len(m.OperatorTrxCounters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrxCount", wireType)
			}
			m.TrxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrxcounter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TrxCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrxcounter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrxcounter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrxcounter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrxcounter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrxcounter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrxcounter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrxcounter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrxcounter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrxcounter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrxcounter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrxcounter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrxcounter = fmt.Errorf("proto: unexpected end of group")
)
